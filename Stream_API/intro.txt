Introduced in Java 8, Stream API is used to process collections of objects. A stream in Java is a 
sequence of objects that supports various methods that can be pipelined to produce the desired result. 

It enables us to perform operations like filtering, mapping, reducing, and sorting


*A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
*Streams donâ€™t change the original data structure, they only provide the result as per the pipelined methods.
*Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. Terminal operations mark the end of the stream and return the result.

The Stream API in Java, introduced in Java 8, provides a powerful and flexible way to process sequences of 
elements. The features of Java stream are mentioned below:

    Concise and Readable Code: Stream API allows writing code in a declarative style, which is more readable and 
    concise compared to traditional loop-based code. It abstracts the iteration logic, letting you focus on the 
    operations to be performed.

    Functional Programming: Streams bring functional programming concepts to Java, enabling operations like map, 
    filter, and reduce. This allows for a more functional approach to processing data, making the code easier to 
    understand and maintain.

    Parallel Processing: Streams can easily be parallelized to leverage multi-core processors for better performance. 
    By using the parallelStream() method, you can process data in parallel, often leading to significant performance 
    improvements for large datasets.

    Chaining Operations: Stream operations can be chained together to form a pipeline, where the output of one operation 
    serves as the input to the next. This makes it easier to perform complex data transformations in a single, readable statement.

    Lazy Evaluation: Lazy evaluation is a key concept in the Java Stream API. It refers to the practice of delaying the 
    execution of an operation until its result is actually needed. In the context of Java Streams, this means that 
    intermediate operations (such as filter, map, etc.) are not executed immediately when they are called. Instead, 
    they are executed only when a terminal operation (such as collect, forEach, etc.) is invoked.

    Flexibility: The Stream API supports a wide range of operations including filtering, mapping, sorting, and collecting. 
    This flexibility makes it suitable for a variety of data processing tasks.

    Immutability and Statelessness: Streams encourage the use of immutability and stateless operations, reducing the risk of 
    side effects and making the code more robust and easier to debug.