Introduced in Java 8, Stream API is used to process collections of objects. A stream in Java is a 
sequence of objects that supports various methods that can be pipelined to produce the desired result. 

It enables us to perform operations like filtering, mapping, reducing, and sorting

*A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
*Streams donâ€™t change the original data structure, they only provide the result as per the pipelined methods.
*Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate 
operations can be pipelined. Terminal operations mark the end of the stream and return the result.

The Stream API in Java, introduced in Java 8, provides a powerful and flexible way to process sequences of 
elements. The features of Java stream are mentioned below:

    Functional Programming: Streams bring functional programming concepts to Java, enabling operations like map, 
    filter, and reduce. This allows for a more functional approach to processing data, making the code easier to 
    understand and maintain.

    Parallel Processing: Streams can easily be parallelized to leverage multi-core processors for better performance. 
    By using the parallelStream() method, you can process data in parallel, often leading to significant performance 
    improvements for large datasets.

    Chaining Operations: Stream operations can be chained together to form a pipeline, where the output of one operation 
    serves as the input to the next. This makes it easier to perform complex data transformations in a single, readable statement.

    Lazy Evaluation: Lazy evaluation is a key concept in the Java Stream API. It refers to the practice of delaying the 
    execution of an operation until its result is actually needed. In the context of Java Streams, this means that 
    intermediate operations (such as filter, map, etc.) are not executed immediately when they are called. Instead, 
    they are executed only when a terminal operation (such as collect, forEach, etc.) is invoked.

    Flexibility: The Stream API supports a wide range of operations including filtering, mapping, sorting, and collecting. 
    This flexibility makes it suitable for a variety of data processing tasks.

    Immutability: Streams in Java are designed to work with immutable data structures. The operations performed on 
    a stream do not modify the source data but produce new streams or results based on the original data. 
    This functional approach promotes immutability.

In Java's Stream API, operations on streams can be categorized into two types: intermediate operations and terminal operations.

Intermediate operations return a new stream. They are lazy, meaning they do not process the elements until a terminal operation 
is invoked. These operations are used to transform or filter the elements of the stream. Some common intermediate operations include:

    filter()
        Filters elements based on a condition.
        Stream<String> filteredStream = stream.filter(s -> s.startsWith("A"));

    map()
        Transforms each element by applying a function.
        Stream<String> upperCaseStream = stream.map(String::toUpperCase);

    flatMap()
        Transforms each element into a stream of elements and flattens them into a single stream.
        Stream<String> flatMappedStream = stream.flatMap(s -> Arrays.stream(s.split(" ")));

    distinct()
        Removes duplicate elements from the stream.
        Stream<String> distinctStream = stream.distinct();

    sorted()
        Sorts the elements in natural order.
        Stream<String> sortedStream = stream.sorted();

    sorted(Comparator<? super T> comparator)
        Sorts the elements using a provided comparator.
        Stream<String> customSortedStream = stream.sorted(Comparator.comparing(String::length));

    limit(long maxSize)
        Truncates the stream to the given number of elements.
        Stream<String> limitedStream = stream.limit(3);

    skip(long n)
        Skips the first n elements of the stream.
        Stream<String> skippedStream = stream.skip(2);


Terminal Operations
    Terminal operations produce a result or a side-effect and mark the end of the stream. After a terminal 
    operation is invoked, the stream is considered consumed and cannot be used further.

        forEach(Consumer<? super T> action)
            Performs an action for each element of the stream.
            stream.forEach(System.out::println);

        forEachOrdered(Consumer<? super T> action)
            Performs an action for each element of the stream, preserving the encounter order.
            stream.forEachOrdered(System.out::println);
                        
        toArray()
            Collects the elements into an array.
            Object[] array = stream.toArray();

        reduce(T identity, BinaryOperator<T> accumulator)
            Reduces the elements to a single value, using an initial value and an accumulator function.
            int sum = stream.reduce(0, Integer::sum);

        collect(Collector<? super T, A, R> collector)
            Collects the elements into a collection or another data structure.
            List<String> list = stream.collect(Collectors.toList());

        min(Comparator<? super T> comparator)
            Finds the minimum element based on a comparator.
            Optional<String> min = stream.min(Comparator.naturalOrder());
            
        max(Comparator<? super T> comparator) 
            Similar to min

        count()
            Returns the count of elements in the stream.
            long count = stream.count();

        anyMatch(Predicate<? super T> predicate)
            Returns true if any elements match the predicate.
            boolean anyMatch = stream.anyMatch(s -> s.startsWith("A"));

        allMatch(Predicate<? super T> predicate)
            Returns true if all elements match the predicate.
            boolean allMatch = stream.allMatch(s -> s.length() > 2);

