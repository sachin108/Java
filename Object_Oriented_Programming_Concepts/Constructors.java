public class Constructors {
    String name;
    // Default contstructor - the Java compiler automatically create a no-arg constructor during the execution of the program

    // No argumnets contsructor
    Constructors(){
        System.out.print("Constructor invoked");
    }
    // Constructor overloading
    // Parametrized contsructor
    Constructors(String name){
        this.name=name;
        // this keyword is used to refer to the current object inside a method or a constructor. 
        // advantage of this() is to reduce the amount of duplicate code.
    }
    public static void main(String[] args) {
        Constructors obj1=new Constructors();     
    }
}

/**
 *  Creating objects from outside the class is prohibited using the private 
 *  constructor.
 *  
 *  A constructor cannot be abstract or static or final.
 *  can be overloaded but can't be overridden
 * 
 *  A constructor in Java is similar to a method that is invoked when an object of
 *  the class is created. A constructor has the same name as that of the class and 
 *  does not have any return type
 * 
What actually happens with the constructor is that the runtime uses type 
data generated by the compiler to determine how much space is needed to
store an object instance in memory, be it on the stack or on the heap.

When the constructor exits, the runtime returns the newly-created instance.
So the reason the constructor doesn't return a value is because it's not 
called directly by your code, it's called by the memory allocation and object 
initialization code in the runtime.

Its return value (if it actually has one when compiled down to machine code) is 
opaque to the user - therefore, you can't specify it.

OR Actually you can imagine the constructor always return the instance of the object 
created. 
 */