JDK
    Java Development Kit (JDK) provides environment and tools for developing, compiling, debugging, and executing a Java program.

    Core components of JDK include:
        * JRE
        * Development Tools
            * Basic Tools
                java, javac, javadoc, jar, javah, javap

            * Security Tools
                keytool, jarsigner, policytool, kinit, ktab, klist

            * Java Deployment Tools
                pack200, unpack200

            * Monitoring and Management Tools
                jconsole, jps, jstat, jstatd

            * Troubleshooting Tools
                info, jmap, jstack  


JRE
    The Java Runtime Environment, or JRE, is a software layer that runs on top of a computer’s operating system software and provides the class libraries and other resources that a specific Java program needs to run.
    The JDK and JRE interact with one another to create a sustainable runtime environment that enables the seamless execution of Java-based applications in virtually any operating system. 
   
    Core components of the JRE include:
        * An implementation of a Java Virtual Machine (JVM)
        * Classes required to run the Java programs (ClassLoader)
        * Property Files

        *Bytecode verifier
            The bytecode verifier ensures the format and accuracy of Java code before it passes to the interpreter. 

        *Interpreter
            After the bytecode successfully loads, the Java interpreter creates an instance of the JVM that allows the Java program to be executed natively on the underlying machine.


JVM (it is a part of JRE)
    Java Virtual Machine (JVM) is an implementation of a virtual machine which executes a Java program.The JVM first interprets the bytecode. 
    It then stores the class information in the memory area. Finally, it executes the bytecode generated by the java compiler.

    It is an abstract computing machine with its own instruction set and manipulates various memory areas at runtime.

    Components of the JVM are:
        * Class Loaders
            The Java ClassLoader dynamically loads all classes necessary to run a Java program. Since Java classes are only loaded into memory when they're required, 
            the JRE uses ClassLoaders to automate this process on demand.
 
        * Run-Time Data Areas
            The JVM defines various memory areas to execute a Java program. These are used during runtime and are known as run-time data areas. 
            Some of these areas are created on the JVM start-up and destroyed when the JVM exits while some are created when a thread is created and destroyed when a thread exits.

        * Execution Engine
            Execution engine executes the instructions using information present in the memory areas.
            It has 3 parts:
                * Interpreter
                    The interpreter executes the bytecode line by line.

                * Just in Time compiler (JIT)
                    It is a component of the Java™ Runtime Environment(JRE) that improves the performance of Java applications at run time.
                    The JIT compiler helps improve the performance of Java programs by compiling bytecodes into native machine code at run time. After compilation into machine code, it runs faster.
                    The JIT compiler is enabled by default, and is activated when a Java method is called. 
                
                * Garbage Collector
                    Java takes care of memory management using Garbage Collection. It's a process of looking at heap memory, identifying which objects are in use and which are not, and finally deleting unused objects.
                    GC is a daemon thread. It can be called explicitly using System.gc() method, however, it won't be executed immediately and the JVM decides when to invoke GC.



JDK
    JRE 
        Bytecode verifier
        JVM
            JIT
            Garbage Collector
            Interpreter

