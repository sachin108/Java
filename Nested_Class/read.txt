There are two types of nested classes you can create in Java.
    *Non-static nested class (inner class)
        A non-static nested class is a class within another class. It has access to members of the enclosing class (outer class). 
        Also known as inner class. Since the inner class exists within the outer class, **you must instantiate the outer class first, 
        in order to instantiate the inner class**

        Using the instance of the outer class, we then created objects of inner classes using .(dot) operator

        *Java treats the inner class as a regular member of a class. They are just like methods and variables declared inside a class.

        *Since inner classes are members of the outer class, you can apply any access modifiers like private, protected to your inner class 
        which is not possible in normal classes.

        *Since the nested class is a member of its enclosing outer class, you can use the dot (.) notation to access the nested class and its members.

        *Nested classes will provide better encapsulation.

        *Non-static nested classes (inner classes) have access to other members of the outer/enclosing class, even if they are declared private.
        

    *Static nested class
        A static class inside another class. Such class is known as static nested class. Static nested classes are not called static inner classes.
        Unlike inner class, a static nested class cannot access the member variables of the outer class. It is because the static nested class doesn't 
        require you to create an instance of the outer class.

        *In Java, only nested classes are allowed to be static.
        *Static nested classes can include both static and non-static fields and methods. 
        *Static nested classes are associated with the outer class. This is why static nested 
         classes can only access the class members (static fields and methods) of the outer class.